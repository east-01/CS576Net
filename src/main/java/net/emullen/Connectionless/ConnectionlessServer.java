package net.emullen.Connectionless;
import java.net.DatagramPacket;
import java.util.Random;

import net.emullen.ProgArgs;

/** The server side makes a ServerSocket and accepts a single socket connection at a time.
 *  Once the server connects to a client socket, the server will expect a message to either encrypt
 *    or decrypt. This is determined using the Message class as the raw string passed through the
 *    socket needs to be deserialized first.
 *  The server will send its response and close the connection.
 */
public class ConnectionlessServer extends ConnectionlessBase {

    // Quotes generated by ChatGPT no clue if these are real or not
    private String[] quotes = new String[] {
        "The journey of a thousand miles begins with one step. - Lao Tzu",
        "It is good to have an end to journey toward; but it is the journey that matters, in the end. - Ursula K. Le Guin",
        "Life is a journey that must be traveled no matter how bad the roads and accommodations. - Oliver Goldsmith",
        "The only impossible journey is the one you never begin. - Tony Robbins",
        "Focus on the journey, not the destination. Joy is found not in finishing an activity but in doing it. - Greg Anderson",
        "Success is a journey, not a destination. The doing is often more important than the outcome. - Arthur Ashe",
        "A journey is best measured in friends, rather than miles. - Tim Cahill",
        "The beautiful journey of today can only begin when we learn to let go of yesterday. - Steve Maraboli",
        "The journey is the reward. - Chinese Proverb",
        "We travel not to escape life, but for life not to escape us. - Anonymous"
    };

    public ConnectionlessServer(ProgArgs args) {
        super(args);

        Random rand = new Random();

        System.out.println("Running connectionless server.");
        System.out.println("Starting connection cycle, press Ctrl+C to exit.");
        // This connection cycle will run indefinitely so the server can handle any series of messages.
        while(true) {
            System.out.println("");

            // Start by connecting and recieving a message
            DatagramPacket incomingPacket = recievePacket();
            String message = new String(incomingPacket.getData(), 0, incomingPacket.getLength());

            // Formulate response and send it
            String response = "Your message packet \"" + message + "\" traveled so far, here is some wisdom for your trouble: " + quotes[rand.nextInt(quotes.length)];

            sendMessagePacket(response, incomingPacket.getAddress(), incomingPacket.getPort());

            // Print status and disconnect
            System.out.println("Completed message transaction for client \"" + incomingPacket.getAddress() + ":" + incomingPacket.getPort() + ".\" Details:");
            System.out.println("  In: \"" + message + "\"");
            System.out.println("  Out: \"" + response + "\"");
        }
    }

}
